<?php

namespace Louvres\CommandeBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Commande
 *
 * @ORM\Table(name="commande")
 * @ORM\Entity(repositoryClass="Louvres\CommandeBundle\Repository\CommandeRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Commande
{

    CONST TARIF_NORMAL = 16;
    CONST TARIF_ENF = 8;
    CONST TARIF_SENIOR = 12;
    CONST TARIF_REDUIT = 10;
    CONST TARIF_FAMILLE = 35;

    /**
     * @ORM\OneToMany(targetEntity="Louvres\CommandeBundle\Entity\Billet", mappedBy="commande", cascade={"persist"})
     * @ORM\JoinColumn(nullable=false)
     */

    private $billets;

    /**
     * @ORM\OneToOne(targetEntity="Louvres\CommandeBundle\Entity\Email", cascade={"persist"})
     */
    private $email;

    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */

    private $id;

    /**
     * @var \DateTime
     *@Assert\DateTime()
     * @ORM\Column(name="date_com", type="datetime")
     */
    private $dateCom;

    /**
     * @var \DateTime
     *@Assert\Date()
     * @ORM\Column(name="date_visite", type="date")
     */
    private $dateVisite;

    /**
     * @var string
     *
     * @ORM\Column(name="type_billet", type="string", length=255)
     */
    private $typeBillet;

    /**
     * @var int
     * @Assert\Range(min=1, max=7)
     * @ORM\Column(name="nb_billet", type="integer", nullable=true)
     */
    private $nbBillet;

    /**
     * @var int
     * @ORM\Column(name="prix_total", type="integer", nullable=true)
     */
    private $prixTotal;

    /**
     * @var string
     * @ORM\Column(name="status", type="string", length=255, nullable=true)
     */
    private $status;


    public function __construct()
    {
        $this->dateCom = new \Datetime();
        $this->setStatus('en cours');
        $this->billets = new ArrayCollection();
    }

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set dateCom
     *
     * @param \DateTime $dateCom
     *
     * @return Commande
     */
    public function setDateCom($dateCom)
    {
        $this->dateCom = $dateCom;

        return $this;
    }

    /**
     * Get dateCom
     *
     * @return \DateTime
     */
    public function getDateCom()
    {
        return $this->dateCom;
    }

    /**
     * Set dateVisite
     *
     * @param \DateTime $dateVisite
     *
     * @return Commande
     */
    public function setDateVisite($dateVisite)
    {
        $this->dateVisite = $dateVisite;

        return $this;
    }

    /**
     * Get dateVisite
     *
     * @return \DateTime
     */
    public function getDateVisite()
    {
        return $this->dateVisite;
    }

    /**
     * Set typeBillet
     *
     * @param string $typeBillet
     *
     * @return Commande
     */
    public function setTypeBillet($typeBillet)
    {
        $this->typeBillet = $typeBillet;

        return $this;
    }

    /**
     * Get typeBillet
     *
     * @return string
     */
    public function getTypeBillet()
    {
        return $this->typeBillet;
    }

    /**
     * Set nbBillet
     *
     * @param integer $nbBillet
     *
     * @return Commande
     */
    public function setNbBillet($nbBillet)
    {
        $this->nbBillet = $nbBillet;

        return $this;
    }

    /**
     * Get nbBillet
     *
     * @return int
     */
    public function getNbBillet()
    {
        return $this->nbBillet;
    }

    /**
     * Set prixTotal
     *
     * @param integer $prixTotal
     *
     * @return Commande
     */
    public function setPrixTotal($prixTotal)
    {
        $this->prixTotal = $prixTotal;

        return $this;
    }

    /**
     * Get prixTotal
     *
     * @return int
     */
    public function getPrixTotal()
    {
        return $this->prixTotal;
    }

    /**
     * Add billet
     *
     * @param \Louvres\CommandeBundle\Entity\Billet $billet
     *
     * @return Commande
     */
    public function addBillet(\Louvres\CommandeBundle\Entity\Billet $billet)
    {
    /*    $this->billets->add($billet);*/
        $this->billets[] = $billet;
        // On lie le billet Ã  la commande
        $billet->setCommande($this);
        return $this;
    }

    /**
     * Remove billet
     *
     * @param \Louvres\CommandeBundle\Entity\Billet $billet
     */
    public function removeBillet(\Louvres\CommandeBundle\Entity\Billet $billet)
    {
        $this->billets->removeElement($billet);
    }

    /**
     * Get billets
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBillets()
    {
        return $this->billets;
    }

    public function calculPrixTotal()
    {
        foreach ($this->billets as $billet) {
            if ($billet->reduit) {
                $this->prixTotal =+ self::TARIF_REDUIT;
            }
            else {
                switch ($billet->tarif) {
                    case 'normal':
                        $this->prixTotal =+ self::TARIF_NORMAL;
                        break;
                    case 'enfant':
                        $this->prixTotal =+ self::TARIF_ENF;
                        break;
                    case 'senior':
                        $this->prixTotal =+ self::TARIF_SENIOR;
                        break;
                }
            }

        }
    }


    /**
     * Set status
     *
     * @param string $status
     *
     * @return Commande
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
}
